{
  "higher-order-observables": [
    {
      "question": "What is the primary characteristic of a higher-order observable?",
      "options": ["It emits primitive values", "It emits other observables", "It has higher priority", "It runs on main thread"],
      "correct": 1,
      "explanation": "Higher-order observables emit other observables as their values, creating nested observable streams."
    },
    {
      "question": "Which operator cancels previous inner observables when a new one arrives?",
      "options": ["mergeMap", "switchMap", "concatMap", "exhaustMap"],
      "correct": 1,
      "explanation": "switchMap cancels the previous inner observable subscription when a new value arrives."
    },
    {
      "question": "What does concatMap guarantee that mergeMap doesn't?",
      "options": ["Better performance", "Order preservation", "Error handling", "Memory efficiency"],
      "correct": 1,
      "explanation": "concatMap maintains the order of emissions by processing inner observables sequentially."
    },
    {
      "question": "When is exhaustMap most useful?",
      "options": ["Search functionality", "Data transformation", "Preventing duplicate operations", "Error recovery"],
      "correct": 2,
      "explanation": "exhaustMap ignores new emissions while current inner observable is active, preventing duplicates."
    },
    {
      "question": "What happens with mergeMap when multiple inner observables emit simultaneously?",
      "options": ["Only first emission is kept", "Emissions are queued", "All emissions are merged", "Last emission overwrites others"],
      "correct": 2,
      "explanation": "mergeMap allows all inner observables to emit concurrently and merges all their emissions."
    },
    {
      "question": "Which scenario is ideal for switchMap?",
      "options": ["File upload queue", "Real-time search", "Sequential API calls", "Login attempts"],
      "correct": 1,
      "explanation": "switchMap is perfect for search as it cancels outdated requests when new search terms arrive."
    },
    {
      "question": "What is the main memory concern with mergeMap?",
      "options": ["CPU usage", "Multiple active subscriptions", "Slow emissions", "Error propagation"],
      "correct": 1,
      "explanation": "mergeMap can create many concurrent subscriptions, potentially leading to memory leaks."
    }
  ]
}
